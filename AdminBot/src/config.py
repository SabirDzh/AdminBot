from dotenv import load_dotenv
import os

load_dotenv()

TOKEN_API = os.getenv("TOKEN_API")

'''
CREATE TABLE GROUP_BOT (
	USER_ID BIGINT PRIMARY KEY,
	NAME_USERS TEXT NULL,
	WARNINGS INTEGER NOT NULL DEFAULT 0 CHECK (
		WARNINGS >= 0
		AND WARNINGS < 3
	),
	IS_BANNED BOOLEAN NOT NULL DEFAULT FALSE,
	BANNED_AT TIMESTAMP WITH TIME ZONE,
	TOTAL_WARNINGS INTEGER NOT NULL DEFAULT 0,
	TOTAL_BAN INTEGER NOT NULL DEFAULT 0,
	IS_MUTED BOOLEAN NOT NULL DEFAULT FALSE,
	MUTED_AT TIMESTAMP WITH TIME ZONE,
	MESSAGE_COUNT INTEGER NOT NULL DEFAULT 0,
	LAST_MESSAGE_TIME TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	UPDATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IDX_USER_BANNED ON GROUP_BOT (IS_BANNED);

CREATE INDEX IDX_USER_MUTE ON GROUP_BOT (IS_MUTED);

CREATE OR REPLACE FUNCTION UPDATE_MODERATION_TIMESTAMP () RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TRIGGER_USER_MODERATION_UPDATE BEFORE
UPDATE ON GROUP_BOT FOR EACH ROW
EXECUTE FUNCTION UPDATE_MODERATION_TIMESTAMP ();

CREATE OR REPLACE FUNCTION AUTO_BAN_USER () RETURNS TRIGGER AS $$
BEGIN
    IF NEW.warnings >= 3 AND NOT NEW.is_banned THEN
        NEW.is_banned = TRUE;
        NEW.banned_at = CURRENT_TIMESTAMP;
        NEW.total_bans = NEW.total_bans + 1;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TRIGGER_USER_MODERATION_AUTO_BAN BEFORE
UPDATE OF WARNINGS ON GROUP_BOT FOR EACH ROW
EXECUTE FUNCTION AUTO_BAN_USER ();

SELECT
	*
FROM
	GROUP_BOT;
'''