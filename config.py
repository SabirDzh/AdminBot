TOKEN_API = "7352169865:AAHzuaDXNBkweoBs4bdBHO-LyjJ9ooTJxEQ"

#–∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–µ–µ –ø–∏—Å–∞—Ç—å @router.message or @dp.message
#–ø–æ—á–µ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º bot.send_message
#–∫–∞–∫ –ø–∏—Å–∞—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ, –Ω–∞–¥–æ –ª–∏ –ø–∏—Å–∞—Ç—å (Command(commands=""))


# from aiogram import Dispatcher, Bot, Router
# from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, ReplyParameters
# from aiogram.filters import Command
# import asyncio
# from config import TOKEN_API
#
# bot = Bot(TOKEN_API)
# dp = Dispatcher()
# router = Router()
# dp.include_router(router)
#
#
# kb = ReplyKeyboardMarkup(
#     keyboard=[
#         [KeyboardButton(text="/help")],
#         [KeyboardButton(text="/description"), KeyboardButton(text="/photo")]
#     ], resize_keyboard=True)
#
#
#
# HELP_COMMANDS = """
# <b>/start</b> - <em>–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞</em>
# <b>/help</b> - <em>–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</em>
# <b>/photo</b> - <em>–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</em>
# <b>/description</b> - <em>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</em>
# """
#
# @router.message(Command(commands=["help"]))
# async def help_command(message: Message):
#     if not message.from_user.is_bot:
#         try:
#             await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª—Å!")
#             await bot.send_message(chat_id=message.from_user.id,
#                                    text=HELP_COMMANDS,
#                                    parse_mode="HTML")
#         except Exception as e:
#             await message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª—Å!")
#             await message.delete()
#     else:
#         await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–∞!")
#         await message.delete()
#
# @router.message(Command(commands=["start"]))
# async def start_command(message: Message):
#     # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
#
#     await bot.send_message(chat_id=message.from_user.id,
#                            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!",
#                            parse_mode="HTML",
#                            reply_markup=kb)
#
# @router.message(Command(commands=["description"]))
# async def description_command(message: Message):
#     await bot.send_message(chat_id=message.from_user.id,
#                            text="–ù–∞—à –±–æ—Ç —É–º–µ–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!",
#                            parse_mode="HTML")
#
# @router.message(Command(commands=["photo"]))
# async def photo_command(message: Message):
#     await bot.send_photo(chat_id=message.from_user.id,
#                          photo="")  # –£–∫–∞–∂–∏—Ç–µ URL –∏–ª–∏ file_id —Ñ–æ—Ç–æ
#
# async def main():
#     print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
#     await dp.start_polling(bot, skip_updates=True)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ skip_update –Ω–∞ skip_updates
#
# if __name__ == "__main__":
#     asyncio.run(main())

"""–†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–ú–ï–ù–´ –ö–ù–û–ü–û–ö –ò –£–î–ê–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–ê –°–û–û–ë–©–ï–ù–ò–Ø –ë–û–¢–ê"""
# new_ikb = InlineKeyboardBuilder()
# new_ikb.button(text="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", callback_data="btn1")
# new_ikb.button(text="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Ñ–æ—Ç–æ", callback_data="btn2")
# new_ikb.adjust(2)
# first_keyboard = new_ikb.as_markup()
#
# new_second_ikb = InlineKeyboardBuilder()
# new_second_ikb.button(text="‚ù§Ô∏è", callback_data="like")
# new_second_ikb.button(text="üëé", callback_data="dislike")
# new_second_ikb.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")
# new_second_ikb.adjust(2)
# second_keyboard = new_second_ikb.as_markup()
#
# @router.message(Command(commands=["start"]))
# async def start_cmd(message: Message) -> None:
#     await bot.send_photo(chat_id=message.from_user.id,
#                          photo="https://fotolandscape.com/blog/linii-v-pejzazhe/",
#                          caption="–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ —Ç–µ–±–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è?",
#                          reply_markup=first_keyboard)
#
#
# @dp.callback_query()
# async def ikb_cb_handler(callback: CallbackQuery) -> None:
#     if callback.data == "btn2":
#         await callback.message.edit_reply_markup(reply_markup=second_keyboard)
#     elif callback.data == "btn1":
#         await callback.message.delete()
#     elif callback.data == "back":
#         await callback.message.edit_reply_markup(reply_markup=first_keyboard)
#
#     global proverca
#     proverca = False
#
#     if proverca == False:
#         if callback.data == "like":
#             await callback.answer(show_alert=False,
#                                   text="–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫")
#             proverca = True
#         elif callback.data == "dislike":
#             await callback.answer(show_alert=False,
#                                   text="–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–∏–∑–ª–∞–π–∫")
#             proverca = True
#
#     elif proverca == True:
#         await callback.answer("–¢—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª!", show_alert=True)
#
#     await callback.answer()



# bot = Bot(TOKEN_API)
# dp = Dispatcher()
# router = Router()
# dp.include_router(router)
#
# number = 0
#
# ikb = InlineKeyboardBuilder()
# ikb.button(text="Button", callback_data="btn1")
# ikb.adjust()
# keyboard = ikb.as_markup()
#
#
# def get_inline_keyboard() -> InlineKeyboardMarkup:
#     first_keyboard = InlineKeyboardBuilder()
#     first_keyboard.button(text="Increase", callback_data="btn_increase")
#     first_keyboard.button(text="Decrease", callback_data="btn_decrease")
#     first_keyboard.button(text="Random number", callback_data="btn_random_number")
#     first_keyboard.adjust(2)
#     return first_keyboard.as_markup()
#
#
# @router.message(Command("start"))
# async def start_cmd(message: Message) -> None:
#     user_name_id = message.from_user.first_name
#     await message.answer(text=f"–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å, {user_name_id}",
#                          reply_markup=keyboard)
#
#
# @router.callback_query()
# async def ikb_kb_handler(callback: CallbackQuery) -> None:
#     await callback.answer("Something!", show_alert=True)
#
#
# @router.callback_query(lambda callback_query: callback_query.data.startswith("btn"))
# async def ikb_cb_handler(callback: CallbackQuery, state: FSMContext) -> None:
#     global number
#     if callback.data == "btn_increase":
#         number += 1
#         await callback.message.edit_text(f"The current number is {number}",
#                                          reply_markup=get_inline_keyboard())
#     elif callback.data == "btn_decrease":
#         number -= 1
#         await callback.message.edit_text(f"The current number is {number}",
#                                          reply_markup=get_inline_keyboard())
#     elif callback.data == "btn_random_number":
#         await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ —á–∏—Å–ª–æ:")
#         # await state.set_state(Form.number)
#         # number = int(message.text)
#         num = randint(0, 20)
#         await callback.message.edit_text(f"The current number is {num}",
#                                          reply_markup=get_inline_keyboard())
#         await state.clear()
#
#     await callback.answer()
#
#
# @router.inline_query()
# async def inline_echo(inline_query: InlineQuery) -> None:
#     text = inline_query.query or "Echo" # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     input_content = InputTextMessageContent(message_text=text) # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     result_id = hashlib.md5(text.encode()).hexdigest() # —Å–æ–∑–¥–∞–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
#
#     item = InlineQueryResultArticle(
#         input_message_content=input_content,
#         id=result_id,
#         title="Echo",
#         thumbnail_url="https://via.placeholder.com/100"  # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞"
#     )
#
#     await bot.answer_inline_query(inline_query_id=inline_query.id,
#                                   results=[item],
#                                   cache_time=1)
#
#     # await inline_query.answer(
#     #     results=[item],
#     #     cache_time=1,
#     #     is_personal=True
#     # )
